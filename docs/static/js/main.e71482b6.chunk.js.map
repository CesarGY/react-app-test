{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/retrieveGift.js","components/GiftGridCustom.js","hooks/useFetchGif.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","console","log","target","handleInputChange","GigGridItem","title","url","className","src","alt","toUpperCase","fetchGif","category","a","endpoint","fetch","response","json","data","map","img","id","images","downsized_medium","GifGridCustom","loading","state","setState","useEffect","then","useFetchGift","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAqCeA,EAlCK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAGCC,mBAAS,IAHV,mBAG5BC,EAH4B,KAGhBC,EAHgB,KAmBnC,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAS,IACpBP,GAAY,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,OACpCL,EAAc,OAMd,2BACIM,KAAK,OACLC,MAAOR,EACPS,SAAU,SAACN,GAAD,OAnBI,SAACA,GACvBO,QAAQC,IAAIR,EAAES,OAAOJ,OACrBP,EAAcE,EAAES,OAAOJ,OAiBEK,CAAkBV,QChBpCW,EATK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IACxB,OACI,yBAAKC,UAAU,0DACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,EAAMK,iB,uBCNTC,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAEdC,EAFc,iDAEuCF,EAFvC,+DAGGG,MAAMD,GAHT,cAGdE,EAHc,gBAICA,EAASC,OAJV,uBAIbC,EAJa,EAIbA,KAJa,kBAQbA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,SAZtB,2CAAH,sDC0BNkB,EAtBO,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDV,SAACA,GAAc,IAAD,EAEZvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WACNjB,EAASC,GAAUiB,MAAK,SAACP,GACrBK,EAAS,CACLT,KAAMI,EACNG,SAAS,SAGlB,CAACb,IAEGc,EDbyBI,CAAalB,GAAhCU,EAFqB,EAE3BJ,KAAcO,EAFa,EAEbA,QAErB,OACI,oCACI,4BAAKb,GACJa,EAAU,UAAY,oBACvB,yBAAKlB,UAAU,aAEPe,EAAOH,KAAI,SAAAY,GAAK,OACZ,kBAAC,EAAD,eACIC,IAAKD,EAAMV,IACPU,UE+BjBE,EA3CM,WAAM,MAEW5C,mBAAS,CAAC,WAFrB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAIvB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,YAAaA,IAC1B,6BACA,4BASQ8C,EAAWf,KAAI,SAAAP,GAAQ,OACnB,kBAAC,EAAD,CACIoB,IAAKpB,EACLA,SAAUA,UCrBtCuB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.e71482b6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategory}) => {\n\n    // Ocurre un error si se deja el state undefined useState();\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Keep before state\n        if (inputValue.length > 0) {\n            setCategory(cats => [inputValue, ...cats]);\n            setInputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={(e) => handleInputChange(e)}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","import React from 'react';\n\nconst GigGridItem = ({title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__bounce animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title.toUpperCase()}</p>\n        </div>\n    );\n};\n\nexport default GigGridItem;\n","export const fetchGif = async (category) => {\n    // const api_key = 'uicjNuo99RKOQVFA9UtzhGEWpMY2HrzJ';\n    const endpoint = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=uicjNuo99RKOQVFA9UtzhGEWpMY2HrzJ`;\n    const response = await fetch(endpoint);\n    const {data} = await response.json();\n\n    //setImages(gifs);\n\n    return data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n}\n","import React from 'react';\nimport {useFetchGift} from \"../hooks/useFetchGif\";\nimport GigGridItem from \"./GifGridItem\";\n\nconst GifGridCustom = ({category}) => {\n\n    const {data: images, loading} = useFetchGift(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading ? 'Loading' : 'Done ðŸ™ˆ'}\n            <div className=\"card-grid\">\n                {\n                    images.map(image => (\n                        <GigGridItem\n                            key={image.id}\n                            {...image}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    );\n};\n\nexport default GifGridCustom;\n","import {useEffect, useState} from \"react\";\nimport {fetchGif} from \"../helpers/retrieveGift\";\n\nexport const useFetchGift = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        fetchGif(category).then((images) => {\n            setState({\n                data: images,\n                loading: false\n            })\n        });\n    }, [category])\n\n    return state\n}\n\n/*setTimeout(() => {\n    setState({\n        data: ['Sofia'],\n        loading: false\n    })\n}, 3000);*/\n","import React, {useState} from 'react';\nimport AddCategory from \"./AddCategory\";\nimport GifGrid from \"./GifGrid\";\nimport GifGridCustom from \"./GiftGridCustom\";\n\nconst GifExpertApp = () => {\n    // 'Sofia', 'Cesar', 'Mariana'\n    const [categories, setCategory] = useState(['Marvel']);\n\n    return (\n        <>\n            <h2>Cesar are you?</h2>\n            <AddCategory setCategory={setCategory}/>\n            <hr/>\n            <ol>\n                {\n                    /*categories.map(category => (\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    ))*/\n\n                    categories.map(category => (\n                        <GifGridCustom\n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n// NOTES\n/*const handleAdd = () => {\n    // el primer elemento es el valor de estado anterior\n    // con la siguente funcion se demuestra\n    setCategory(cats => [...cats, 'Yess'])\n    // Other way\n    // setCategory(['Yessenia', ...categories]);\n    <button onClick={() => handleAdd()}>Add Category</button>\n    {\n    return <li key={category}>{category}</li>\n    }\n}*/\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./components/GifExpertApp\";\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}